#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourtRecords.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class CourtRecords : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertPrintJob(PrintJob instance);
    partial void UpdatePrintJob(PrintJob instance);
    partial void DeletePrintJob(PrintJob instance);
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    #endregion
		
		public CourtRecords(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CourtRecords(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CourtRecords(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CourtRecords(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<PrintJob> PrintJobs
		{
			get
			{
				return this.GetTable<PrintJob>();
			}
		}
		
		public System.Data.Linq.Table<Record> Records
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
	}
	
	[Table(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _FullName;
		
		private EntitySet<Record> _Records;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public Employee()
		{
			this._Records = new EntitySet<Record>(new Action<Record>(this.attach_Records), new Action<Record>(this.detach_Records));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(250)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Records_Employees", Storage="_Records", ThisKey="ID", OtherKey="EmployeeID", DeleteRule="NO ACTION")]
		public EntitySet<Record> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Records(Record entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[Table(Name="dbo.PrintJobs")]
	public partial class PrintJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _RecordID;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<byte> _Status;
		
		private System.Nullable<System.DateTime> _LastStatusUpdateDate;
		
		private EntityRef<Record> _Record;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnRecordIDChanging(long value);
    partial void OnRecordIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnStatusChanging(System.Nullable<byte> value);
    partial void OnStatusChanged();
    partial void OnLastStatusUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastStatusUpdateDateChanged();
    #endregion
		
		public PrintJob()
		{
			this._Record = default(EntityRef<Record>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_RecordID", DbType="BigInt NOT NULL")]
		public long RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					if (this._Record.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt")]
		public System.Nullable<byte> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_LastStatusUpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastStatusUpdateDate
		{
			get
			{
				return this._LastStatusUpdateDate;
			}
			set
			{
				if ((this._LastStatusUpdateDate != value))
				{
					this.OnLastStatusUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastStatusUpdateDate = value;
					this.SendPropertyChanged("LastStatusUpdateDate");
					this.OnLastStatusUpdateDateChanged();
				}
			}
		}
		
		[Association(Name="FK_PrintJobs_Records", Storage="_Record", ThisKey="RecordID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public Record Record
		{
			get
			{
				return this._Record.Entity;
			}
			set
			{
				Record previousValue = this._Record.Entity;
				if (((previousValue != value) 
							|| (this._Record.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Record.Entity = null;
						previousValue.PrintJobs.Remove(this);
					}
					this._Record.Entity = value;
					if ((value != null))
					{
						value.PrintJobs.Add(this);
						this._RecordID = value.ID;
					}
					else
					{
						this._RecordID = default(long);
					}
					this.SendPropertyChanged("Record");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Records")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _EmployeeID;
		
		private string _CaseNumber;
		
		private System.DateTime _RecordDate;
		
		private string _FileName;
		
		private EntitySet<PrintJob> _PrintJobs;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnCaseNumberChanging(string value);
    partial void OnCaseNumberChanged();
    partial void OnRecordDateChanging(System.DateTime value);
    partial void OnRecordDateChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public Record()
		{
			this._PrintJobs = new EntitySet<PrintJob>(new Action<PrintJob>(this.attach_PrintJobs), new Action<PrintJob>(this.detach_PrintJobs));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CaseNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CaseNumber
		{
			get
			{
				return this._CaseNumber;
			}
			set
			{
				if ((this._CaseNumber != value))
				{
					this.OnCaseNumberChanging(value);
					this.SendPropertyChanging();
					this._CaseNumber = value;
					this.SendPropertyChanged("CaseNumber");
					this.OnCaseNumberChanged();
				}
			}
		}
		
		[Column(Storage="_RecordDate", DbType="DateTime NOT NULL")]
		public System.DateTime RecordDate
		{
			get
			{
				return this._RecordDate;
			}
			set
			{
				if ((this._RecordDate != value))
				{
					this.OnRecordDateChanging(value);
					this.SendPropertyChanging();
					this._RecordDate = value;
					this.SendPropertyChanged("RecordDate");
					this.OnRecordDateChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(100)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Association(Name="FK_PrintJobs_Records", Storage="_PrintJobs", ThisKey="ID", OtherKey="RecordID", DeleteRule="CASCADE")]
		public EntitySet<PrintJob> PrintJobs
		{
			get
			{
				return this._PrintJobs;
			}
			set
			{
				this._PrintJobs.Assign(value);
			}
		}
		
		[Association(Name="FK_Records_Employees", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._EmployeeID = value.ID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrintJobs(PrintJob entity)
		{
			this.SendPropertyChanging();
			entity.Record = this;
		}
		
		private void detach_PrintJobs(PrintJob entity)
		{
			this.SendPropertyChanging();
			entity.Record = null;
		}
	}
}
#pragma warning restore 1591
